# sdothum - 2016 (c) wtfpl
[ $TRACE ] && CHILD="draw/monitor $@" . $PARENT

# herbstluftwm
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ....................................................... Draw monitor (regions)

# Usage: draw monitor conky, conky view
#        draw monitor conky fullscreen [width], conky fullscreen view
#        draw monitor fullframe, hidden conky view
#        draw monitor fullscreen, fullscreen view
#        draw monitor secondary [fullscreen], secondary monitor view
# Note:  draw monitor conky fullscreen width, returns the width only, see draw panel

SHADOW=${SHADOW:-1}
# load theme
# . ${0%/draw}/config/ENV
case $@ in
  secondary*) panel_height=$(query pheight secondary) ;;
  *)          panel_height=$(query pheight primary) ;;
esac

# ricing pad left/right margins, 17/12 ~ pythagora's constant, 21/13 ~ golden mean, etc
# RICE=21/13

# ..................................................................... Displays

# secondary display area
X1=0
Y1=0

# split out display geometry
xy() {
  eval X$1=$2
  eval Y$1=$3
}

# X Y display dimensions
xy 0 $(query display)
is multihead && xy 1 $(query display secondary)

# XxY+X'+Y' monitor configuration
monitor() {
  herbstclient list_monitors | grep "^$1:" | cut -d' ' -f2
}

# currently defined monitors
primary=$(monitor 0)
secondary=$(monitor 1)

# ....................................................................... Layout

# margin tweaks for known display resolutions
desktop_margin=$(margins $X0)
# see toggle monocle
[ -e $MONOCLE ] && monocle=$(cat $MONOCLE) || monocle=0

# with transparent compton window borders, calculations assume..
# - frame_border_width=0
# - smart_frame_surroundings=0
# - smart_window_surroundings=0
# border=$(herbstclient attr theme.border_width)
frame=$(herbstclient attr settings.frame_gap)
window=$(herbstclient attr settings.window_gap)
border=$(herbstclient attr theme.border_width)
window_frame=$(( $window + $frame ))
margin=$(( $desktop_margin - $window_frame ))
[ $margin -lt 0 ] && margin=0
# frame and window gap changes will skew the left margin along the X axis
[ $RICE ] && marginX=$(( $margin * $RICE )) || marginX=$margin
conkyX=$(( $CONKY_WIDTH + $CONKY_GAP + $CONKY_INNER + $CONKY_OUTER - $window_frame ))

# adjust monitor by panel height?
if [ $PANEL_MARGIN ] ;then
  [ -e $PANEL ] && panelY=$panel_height || panelY=0
else
  panelY=0
fi
[ $margin -lt $panel_height ] && marginY=$(( $panel_height - $margin )) || marginY=0
# reshape monocle frame by urxvt lines
if [ $monocle -gt 0 ] && [ $MONOCLE_LINES -gt 0 ] ;then
  monocleY=$(( $MONOCLE_SIZE * $MONOCLE_LINES ))
  # frame effect, arbitrary compression of frame width in relation to frame height
  monocle=$(( $monocle + $monocleY ))
else
  monocleY=0
fi
[ $margin -lt $monocleY ] && monocleY=$margin

# adjust virtual monitor dimensions to set fixed visual window margins
normal_width=$(( $X0 - $marginX - $conkyX - $monocle*2 ))
fullscreen_width=$(( $normal_width - $window_frame*2 - $border*2))
# panel width global attribute, see draw panel
# echo $fullscreen_width >$FULLSCREEN:width

# ..................................................................... Geometry

# monitor regions are adjusted per conky layout.. in this particular instance,
# margin is added to 0x0+X'+0 to tuck right window margin under conky panel area
case $@ in
  # conky*fullscreen*width) echo $fullscreen_width
  #                         exit ;;

  conky) rm -f $FULLSCREEN:primary 2>/dev/null
         rm -f $FULLSCREEN:$TAG 2>/dev/null
         primary=$(printf '%dx%d%+d%+d' \
                 $(( $normal_width - $SHADOW )) \
                 $(( $Y0 + $monocleY*2 - $margin*2 )) \
                 $(( $X1 + $marginX + $monocle - 1 )) \
                 $(( $margin - $monocleY )) ) ;;

  conky*fullscreen) touch $FULLSCREEN:primary
                    touch $FULLSCREEN:$TAG
                    if [ $X0 -gt 1024 ] ;then
                      # desktop screens retain margins
                      primary=$(printf '%dx%d%+d%+d' \
                              $(( $fullscreen_width - $SHADOW )) \
                              $(( $Y0 + $monocleY*2 - $margin*2 - $window_frame*2 - $panelY )) \
                              $(( $X1 + $marginX + $window_frame + $monocle - 1 )) \
                              $(( $margin - $monocleY + $window_frame )) )
                    else
                      # laptop screens fill to edge
                      primary=$(printf '%dx%d%+d%+d' \
                              $(( $fullscreen_width + $marginX + $window_frame )) \
                              $Y0 \
                              $X1 \
                              0 )
                    fi ;;

  fullframe) rm -f $FULLSCREEN:primary 2>/dev/null
             rm -f $FULLSCREEN:$TAG 2>/dev/null
             if [ $monocle -eq 0 ] ;then
               primary=$(printf '%dx%d%+d%+d' \
                       $(( $X0 - $marginX*2 )) \
                       $(( $Y0 - $margin*2 + $window_frame - $marginY - 2 )) \
                       $(( $X1 + $marginX - 1 )) \
                       $margin )
             else
               primary=$(printf '%dx%d%+d%+d' \
                       $normal_width \
                       $(( $Y0 + $monocleY*2 + $window_frame - $marginY - 2 )) \
                       $(( $X1 + ($X0 - $normal_width)/2 - 1 )) \
                       $(( $margin - $monocleY )) )
             fi ;;

  fullscreen) touch $FULLSCREEN:primary
              touch $FULLSCREEN:$TAG 2>/dev/null
              if [ $monocle -eq 0 ] ;then
                primary=$(printf '%dx%d%+d%+d' \
                        $X0 \
                        $Y0 \
                        $X1 \
                        0 )
              else
                # golden ratio screen retain margins
                primary=$(printf '%dx%d%+d%+d' \
                        $fullscreen_width \
                        $(( $Y0 - $marginX*2 - $window_frame*2 - $panelY )) \
                        $(( $X1 + ($X0 - $fullscreen_width)/2 - 1 )) \
                        $(( $marginX + $window_frame)) )
              fi ;;

  secondary) rm -f $FULLSCREEN:secondary 2>/dev/null
             rm -f $FULLSCREEN:$TAG 2>/dev/null
             # create identical secondary monitor margins using dot pitch adjustment
             margin=$(pixel_match $margin $UM1680)
             marginX=$(pixel_match $marginX $UM1680)
             # bottom margin calculation adjusted for lower resolution than primary
             secondary=$(printf '%dx%d%+d%+d' \
                       $(( $X1 - $marginX*2 )) \
                       $(( $Y1 - $margin*2 + $window_frame - $marginY - 2 )) \
                       $marginX \
                       $margin ) ;;

  secondary*fullscreen) touch $FULLSCREEN:secondary
                        touch $FULLSCREEN:$TAG 2>/dev/null
                        secondary=$(printf '%dx%d%+d%+d' \
                                  $X1 \
                                  $Y1 \
                                  0 \
                                  0 ) ;;
esac

# configure multihead..
# virtual monitors defined in lieu of hc pad monitor, to define fullscreen boundaries
# trap negative X pos when no monitor gap»
primary=$(echo $primary | sed -r 's/-([0-9]*)/+0/g')
[ $TRACE ] && echo "= herbstclient set_monitors $primary $secondary" >>$TRACE
herbstclient set_monitors $primary $secondary &

# ................................................................... Fullscreen

if [ -e $FULLSCREEN:primary ] || [ -e $FULLSCREEN:secondary ] ;then
  touch $FULLSCREEN
else
  rm -f $FULLSCREEN 2>/dev/null
fi

# vim: set ft=sh: #
