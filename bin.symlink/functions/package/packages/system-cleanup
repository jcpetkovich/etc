#!/usr/bin/env bash

read -r -d '' HELP <<EOF
Usage: system-cleanup [options]

Cleanup old ebuilds and try to get rid of old packages, and do reverse
rebuilds if necessary. By default it only fixes broken packages and
removes old ones.

    Command options:
    -h    Print this help documentation.
    -l    Clean language runtimes.
    -p    Clean perl runtime.
    -P    Clean python runtime.
    -H    Clean haskell runtime.
    -a    Clean everything.
EOF

# Globals
PATH=/sbin:/usr/sbin:$PATH

function info () {
    echo -e '\033k'$1'\033\\'
    printf "  [ \033[00;34m..\033[0m ] $1"
}

function user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

function success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

function fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    [[ $FORCE != true ]] && exit 1
}

function cleanup() {
    info "Emerging @preserved-rebuild ...\n"
    sudo emerge @preserved-rebuild || fail "Couldn't finish @preserved-rebuild..."
    success "Finished @preserved-rebuild"
    info "Deleting old packages...\n"
    sudo emerge -c || fail "Couldn't remove old packages"
    success "Finished deleting old pakages"
    info "Starting revdep-rebuild...\n"
    sudo revdep-rebuild -i || fail "revdep-rebuild failed"
    success "Finished revdep-rebuild"
}

function clean-language-runtime() {
    local tool=$1

    if which "${tool%% *}"; then
        info "Starting $tool...\n"
        sudo $tool || fail "$tool failed"
        success "$tool completed successfully"
    else
        info "${tool%% *} not found, skipping..."
    fi
}

function clean-python(){
    clean-language-runtime "python-updater"
}

function clean-haskell(){
    clean-language-runtime "haskell-updater"
}

function clean-perl(){
    clean-language-runtime "perl-cleaner --reallyall"
}

while getopts ":hlHpPaf" opt; do
    case $opt in
        h ) echo "$HELP"
            exit 0
            ;;
        l ) CLEAN_PYTHON=true
            CLEAN_PERL=true
            CLEAN_HASKELL=true
            ;;
        H ) CLEAN_HASKELL=true
            ;;
        p ) CLEAN_PERL=true
            ;;
        P ) CLEAN_PYTHON=true
            ;;
        a ) CLEAN_PYTHON=true
            CLEAN_PERL=true
            CLEAN_HASKELL=true
            EVERYTHING=true
            ;;
        f ) FORCE=true
            ;;
        ? ) echo "Invalid option -${OPTARG}..."
            echo "$HELP"
            exit 0;;
    esac
done
shift $(($OPTIND - 1))

cleanup
[[ $CLEAN_PYTHON == true ]] && clean-python
[[ $CLEAN_PERL == true ]] && clean-perl
[[ $CLEAN_HASKELL == true ]] && clean-haskell
[[ $EVERYTHING == true ]] && success "Updated everything, system clean :D"

exit 0
