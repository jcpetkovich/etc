#!/usr/bin/env dash
# Jean-Christophe Petkovich - 2016 (c) wtfpl
# X11 Dynamic Menu
# ▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂

# ................................................................. Rofi wrapper

# Usage: dmenu <function>
# Note:  non-dmenu messages within $0/functions/dmenu
#        source $HOME/bin/dmenu
#        POSIX standard only.

CACHEDIR=${XDG_CACHE_HOME:-$HOME/.cache}

# content formatting items
SEP='∙'
LSPACE="    $SEP"
RSPACE="$SEP    "
INDENT='   '
UTF='□'

leader='──────'
fg='argb:FFFDF6E3'
hlfg='argb:E025C0EF'
hlbg='argb:00070707'
bgblack='argb:E0000000'
cltransparent='argb:00000000'
font='PragmataPro Mono'

# allow subword match input (by inserting single quote symbol into input)
unquote() {
	echo "$@" | sed "s/'//g"
}

# ................................................... Rofi fullscreen fill specs

# tweak rofi padding, fontsize and lines for 3200, 1680 (secondary), 1440, 1024
# displays
if is display =3200 ;then
		# padding=620
		padding=443
		fontsize=22
		lines=12
fi

# ............................................................... Available apps

# return list of existing applications
apps() {
	unset apps
	for i in $@
	do
		# allow user named browser scripts
		# apps="$apps$(which $i >/dev/null 2>&1 && echo "$i ")"
		if [ -n "$(find /usr/bin -name $i)$(find /usr/sbin -name $i)" ] ;then
			apps="$apps$i "
		fi
	done
	echo $apps | sed 's/ /\n/g'
}

# ........................................................ Media player playlist

# usage:  playlist library played, see dmenu series/movies
playlist() {
	cat "$2" | while read line
	do
		[ "$line" ] && grep -q "$line" "$1" && sed -i "/^$line/s/^$line/$line $SEP/" "$1"
	done
	cat "$1"
}

# playlist order
sortlist() {
	[ "$*" ] && echo 'sort by name' || echo 'sort by date'
}

# ............................................................... Source wrapper

# dmenu wrapper for sourced apps
# usage: dmenu '<prompt>' ['<select>' | -filter '<filter>'] [<option>*]
dmenu() {
	# prompt string
	if [ "$1" ] ;then
		prompt="$1  "
		shift
	fi

	# select string
	unset select
	if [ "$1" ] ;then
		# if not parameter
		if [ "${1%%-*}" != '' ] ;then
			select="$1"
			shift
		fi
	fi

	# filter option (must precede remaining option list)
	unset filter
	if [ "$1" = '-filter' ] ;then
		filter="$2"
		shift 2
	fi

	# use blank -mesg as added separator and indent pick list!
	input=$(sed "s/^/$INDENT/" \
				| rofi -hide-scrollbar -padding $padding \
							 -bw 0 -eh 2 -opacity 85 \
							 -color-enabled -color-window "$bgblack" \
							 -color-normal "$cltransparent,$fg,$cltransparent,$hlbg,$hlfg" \
							 -color-active "$cltransparent,$fg,$cltransparent,$hlbg,$hlfg" \
							 -color-urgent "$cltransparent,$fg,$cltransparent,$hlbg,$hlfg" \
							 -font "$font $fontsize" \
							 -lines $lines -width 100 -fixed-num-lines -separator-style none \
							 -dmenu -p "${prompt}$leader   " -i -mesg ' ' -select "$select" -filter "$filter" $@ \
				)
	# strip indent from input!
	[ $? -eq 0 ] && echo "$input" | sed "s/^$INDENT//" || return 1
}

# ......................................................................... Main

# if not sourced, execute dmenu message
if [ $(basename $0) = dmenu ] ;then
	msg=$1
	shift
	if [ -e ${0%/dmenu}/functions/dmenu/$msg ] ;then
			. ${0%/dmenu}/functions/dmenu/$msg $@
	else
		usage $0
	fi
	# pidof gpaste-clieunt >/dev/null || gpaste-client &
fi
