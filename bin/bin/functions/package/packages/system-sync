#!/usr/bin/env bash

read -r -d '' HELP <<EOF
Usage: system-sync [options]

Sync or show status of my personal repositories.

    Command options:
    -h    Print this help documentation.
    -f    Fetch updates only
    -p    Push updates only
    -s    Show status
    -a    Try to auto-sync as much as possible
EOF

function info () {
    echo -e '\033k'$1'\033\\'
    printf "  [ \033[00;34m..\033[0m ] $1"
}

function user () {
    printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

function success () {
    printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

function fail () {
    printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
    echo ''
    exit 1
}

function fetch-updates () {
    for repo in $USER_REPOS; do
        pushd $repo > /dev/null
        info "Fetching ${repo}...\n"
        if ! git fetch; then
            fail "Fetch failed, check .git/config and try again."
        fi
        success "Done ${repo}"
        popd > /dev/null
    done
}

function push-updates () {
    for repo in $USER_REPOS; do
        pushd $repo > /dev/null
        info "Pushing ${repo}...\n"
        if ! git push; then
            fail "Push failed, fix and try again"
        fi
        success "Done ${repo}"
        popd > /dev/null
    done
}

function status () {
    for repo in $USER_REPOS; do
        pushd $repo > /dev/null
        if ! git status --short > /dev/null; then
            fail "Are you sure ${repo} is a git repo?"
        else
            local diffsize="$(git status --short)"
            if ! [[ -z "$diffsize" ]]; then
                info "Status of ${repo}...\n"
                git status --short --branch
            fi
        fi
        popd > /dev/null
    done
}

function auto-sync () {
    fetch-updates
    push-updates
}

function get-repos () {
    local user_repos=
    for p in $USER_PATHS; do
        user_repos="$(find $p -name ".git" -type d) $user_repos"
    done

    for p in $user_repos; do
        echo "${p%%.git}"
    done
}

if [[ -z $USER_PATHS ]]; then
    fail "env variable USER_REPOS must be defined"
fi

USER_REPOS="$(get-repos)"

while getopts ":hfpsa" opt; do
    case $opt in
        h ) echo "$HELP"
            exit 0;;
        f ) fetch-updates
            exit 0;;
        p ) push-updates
            exit 0;;
        s ) status
            exit 0;;
        a ) auto-sync
            exit 0;;
        ? ) echo "Invalid option -${OPTARG}..."
            echo "$HELP"
            exit 0;;
    esac
done
shift $(($OPTIND - 1))

auto-sync
exit 0
